# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'ipaddr'

number_of_server_nodes  = 3
number_of_agent_nodes   = 2
first_server_node_ip    = '10.11.0.101'
first_agent_node_ip     = '10.11.0.201'

server_node_ip_address  = IPAddr.new first_server_node_ip
agent_node_ip_address   = IPAddr.new first_agent_node_ip

# a different token can be generated by using the command: openssl rand -hex 32
k3s_token = '9a4f6df80345d5fcaad1574796a3cdb44b58d9772bb3bdbc21a47376938df495'


# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "generic/alpine312"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider 'virtualbox' do |vb|
    vb.linked_clone = true
    vb.cpus = 2
    vb.memory = 3072
  end

  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # create master nodes
  (1..number_of_server_nodes).each do |n|
    name = "server#{n}"
    fqdn = "#{name}.example.test"
    server_ip_address = server_node_ip_address.to_s; server_node_ip_address = server_node_ip_address.succ
    config.vm.define name do |config|
      config.vm.hostname = fqdn
      config.vm.network :private_network, ip: server_ip_address, libvirt__forward_mode: 'none', libvirt__dhcp_enabled: false  
      config.vm.provision "shell", path: 'provision-base.sh'
      config.vm.provision :reload
      config.vm.provision "shell", path: 'post-server.sh', args: [k3s_token, server_ip_address, first_server_node_ip] 
    end
  end

  # create agent nodes
  (1..number_of_agent_nodes).each do |n|
    name = "agent#{n}"
    fqdn = "#{name}.example.test"
    agent_ip_address = agent_node_ip_address.to_s; agent_node_ip_address = agent_node_ip_address.succ
    config.vm.define name do |config|
      config.vm.hostname = fqdn
      config.vm.network :private_network, ip: agent_ip_address, libvirt__forward_mode: 'none', libvirt__dhcp_enabled: false  
      config.vm.provision "shell", path: 'provision-base.sh'
      config.vm.provision :reload
      config.vm.provision "shell", path: 'post-agent.sh', args: [k3s_token, agent_ip_address, first_server_node_ip] 
    end
  end

end
